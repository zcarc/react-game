
1-5.
    바벨은 문법만 최신문법으로 변환해준다.
    기존에 바벨만 추가해서 자바스크립트로 변환한 상태에서
    최신 객체나 메서드를 사용하고 싶다면 바벨 폴리픽이라는 것을 추가해야한다.


2-3.
    lecture>npm init
    lecture>npm i react react-dom
    lecture>npm i -D webpack webpack-cli

    -D: 개발할 때만 사용한다는 의미
        실제 서비스 할 때는 webpack이 필요없다.

    devDependencies 에는 개발할 때만 사용하고,
    dependencies 에는 실제 서비스할 때 사용한다.

2-5.
    lecture>webpack 명령어 입력시 명령어를 찾을 수 없다고 에러가 뜨는 경우 해결방법
        1. package.json 의 scripts에 "dev": "webpack"으로 명시하는 방법
            npm run dev 치는 순간 webpack 실행

        2. npx webpack 명령어로 실행


    바벨 설치 (배포할 때는 안쓰이고 개발할 때만 쓰인다.)
    npm 다음에 패키지를 여러개 설치하는데 한칸 띄는 의미는 '&'의 의미로 'and'의 의미이다.
    @bable/core: 바벨 코어 파일이 내장되어 있다.(기본 파일)
    @babel/preset-env: 브라우저에 맞게 알아서 최신문법들을 해석할 수 있는 문법(예전 문법)으로 변환해준다.
    @bable/preset-react: jsx를 지원해준다.
    babel-loader: babel과 webpack을 연결해준다. (webpack이 js 파일들에 대해 babel을 실행하도록 만들어준다.)
    lecture>npm i -D @babel/core @babel/preset-env @babel/preset-react babel-loader

    lecture>npm i -D @babel/plugin-proposal-class-properties


2-6.
    01_GuGuDan>npm init
    01_GuGuDan>npm i react react-dom
    01_GuGuDan>npm i -D webpack webpack-cli
    01_GuGuDan>npm i -D @babel/core @babel/preset-env @babel/preset-react babel-loader @babel/plugin-proposal-class-properties

    * IE에서 넣어주면 좋은 메타 태그
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">

2-7.
    plugins의 모음들이 presets
    @babel/preset-env 안에 많은 플러그인들이 포함되어 있다.
    예전 브라우저들을 바벨이 호환될 수 있도록 하는 것인데
    특정 버전의 브라우저만 호환되게 하고 싶을 때 옵션을 줄 수 있다.
    options: {
                    presets: [
                        ['@babel/preset-env', {
                            targets:{
                                browsers: ['last 2 chrome versions']
                            }
                        }], '@babel/preset-react'],
                    plugins: []
                }
    이렇게 작성하면 크롬 최신버전과 그 전 버전까지 호환되게 설정하고 익스플로러는 호환되지 않는다.
    회사에서 지원하고자 하는 브라우저만 적어주면 더 좋다.
    전부 다 지원하게 만들면 바벨에서 하는 일이 많기 때문에 점점 느려진다.

    브라우저 목록을 볼 수 있는 주소
    https://github.com/browserslist/browserslist

    이렇게 작성하면 한국에서 점유율이 5% 이상인 브라우저들을 지원한다는 의미이다.
    browsers: ['> 5% in KR']

    "debug: true"는 개발할 때 사용할 수도 있다.
    options: {
                        presets: [
                            ['@babel/preset-env', {
                                targets:{
                                    browsers: ['> 5% in KR', 'last 2 chrome versions']
                                },
                                debug: true,
                            }], '@babel/preset-react'],
                        plugins: []
                    }


2-9.

    02_WordRelay>npm i -D webpack-dev-server
    02_WordRelay>npm i -D react-hot-loader

    webpack-dev-server: "webpack.config.js"를 읽어서 빌드를 해주고 서버로 유지를 시켜준다.
    react-hot-loader: 코드 수정이 발생하면 실시간으로 반영된다.

    * 강의에서는 react-hot-loader를 사용하라고 하지만 사용하지 않아도 현재 반영은 된다.

    webpack.config.js는 수정하면 바로 반영되지 않아서 webpack을 다시 실행해야한다.

    webpack-dev-server가 감지하는 것은 클라이언트에서 불러온 애들만 자동으로 업데이트 해주고
    webpack.config.js에서는 바뀐것을 감지하지 못한다.



2-10.

    리액트 버전 업으로 react-hot-loader는 추가 설정이 필요하다.
    "webpack.config.js"의 "rules"에 아래 부분을 추가해야함.
            {
                test: /\.(js|jsx)$/,
                use: 'react-hot-loader/webpack',
                include: /node_modules/
            }

    클래스 메서드들은 더 이상 클래스가 아니기 때문에 Hooks 함수 내의 메서드들은
    const, let 타입으로 변수로 선언을 해줘야한다.

    localhost:8080으로 들어가서 실행해보면 두가지가 뜬다.
    HMR: Hot module reload
    WDS: Web pack dev server



3-1. import와 require 비교

    require(''): 노드의 모듈 시스템
    import: ES2015 문법

    import는 정적 임포트, require는 동적 임포트라는 차이가 있다.
    import는 항상 파일 상단에, require는 파일 아무데서나 쓸 수 있다.

    class NumberBaseball extends Component{}
    module.exports = NumberBaseball;
    const numberBaseball = require('./NumberBaseball');

    변수 numberBaseball는 클래스가 된다.
    require()와 import는 호환이 된다.


    import React from 'react';
    import ReactDOM from 'react-dom');

    import WordRelay from = require('./WordRelay_Hooks');
    import {hot} from 'react-hot-loader/root';

    const {Hot} = hot(WordRelay);

    exports 되는 게 객체나 배열이면 구조 분해할 수 있다.


    NumberBaseball.jsx
        import React, {Component} from 'react';

        class NumberBaseball extends Component {
        }

        exports const hello = 'hello'; // default 가 아닌 것들은 import { hello };
        exports default NumberBaseball; // 가져올 때 import NumberBaseball

    default는 exports를 한번만 쓸 수 있고 나머지들은 변수명만 겹치지 않으면 계속 만들 수 있다.

    엄밀히 따지면
    "exports default"와 "module.exports"는 다르다.
    하지만 호환이 된다라고만 알고 있으면 된다.

    노드 모듈 시스템에서
    module.ports = { hello: 'a' };
    exports.hello = 'a';
    위 두개는 서로 같다.

    그래서 "import", "exports default"는 ES2015 문법이고
    "require()", "exports.module"은 노드의 모듈 문법이다.

    노드의 모듈 문법은 common.js 라고 한다.

    노드에서는 기본적으로 노드 모듈 문법만 지원한다.
    그래서 import를 쓰면 에러가 난다.
    근데 다른 코드들 중 import를  쓰는데도 동작하는 이유는
    바벨이 import도 require로 바꿔준다.
    노드에서는 노드 문법쓰고 리액트에서는 ES2015 문법 쓴다고 생각하면 된다.

    주의할점은 webpack.config.js에서는 ES2015 문법을 사용하면 에러가 발생해서
    require()을 사용하는 노드 문법을 사용해야한다.
    그래서 client의 jsx 파일들은 웹팩이 다 바꿔주기 때문에 ES2015 문법을 사용해도 상관없다.


3-9. React Devtools

    크롬 확장프로그램이고 디버깅할 때 좀 더 편하다.



3-11. PureComponent와 React.memo

    PureComponent : shouldComponentUpdate()가 이미 구현되어 있는 객체
        PureComponent의 문제점은 객체나 배열이 참조 관계일 때 참조된 state를 그대로 넣으면 참조관계가 true여서
        PureComponent가 알아차리지 못한다. 그래서 state가 바뀌지 않은 것으로 판단되어 redering을 하지 않는다.



4-1. React 조건문

        for을 render() 안에서 못뜬다기 보다는
        return ()안의 render()에서 for()을 사용하지 못한다.
        쓸 수 있는 방법이 있는데 가독성이 안좋아서 보통은 다른 방법을 사용한다.

        false, undefined, null은 jsx에서 "태그없음"을 의미한다.



4-4. 반응속도체크 Hooks로 전환하기

        Hooks에서 useState()는 render()가 다시 되지만
        useRef()는 render()가 되지 않는다.
        그래서 값이 바뀌어도 렌더링을 하고 싶지 않은 경우에는
        useRef()를 사용하면 된다.

        setTimeout()이나 setInterval()들은 useRef()를 사용한다.
        값이 자주 바뀌는데 화면에 렌더링은 하지 않을 때 useRef()를 사용한다.



4-5. return 내부에 for과 if 쓰기

        jsx 에서 반환할 때 return() 이렇게 사용했었는데
        return[] 배열로도 반환할 수 있다.
        이 방법은 거의 쓰이지 않는다.

        return [
            <div key="사과">사과</div>,
            <div key="배">배</div>,
            <div key="감">감</div>,
            <div key="귤">귤</div>,
            <div key="포도">포도</div>,
        ]



5-1. 리액트 라이프사이클 소개

            // render()가 가장 처음 성공적으로 실행-종료되었다면
            // componentDidMount()가 한번만 실행된다.
            // setState()로 인한 re-Rendering에는 실행되지 않는다.
            // 주로 componentWillUnmount()와 같이 쓰인다.
            componentDidMount() {

            }

            // 부모 Component가 현재의 Component를 제거했을 때 호출된다.
            // 주로 componentDidMount()와 같이 쓰인다.
            componentWillUnmount() {
            }

            // render()가 setState()로 인해서 re-rendering 되어도 실행하는 메서드이다.
            componentDidUpdate(prevProps, prevState, snapshot) {
            }


            Life Cycle
                클래스인 경우
                1. constructor()
                2. render()
                3. ref()
                4. componentDidMount()

                setState() or props 바뀔 때
                    a. shouldComponentUpdate(): true인 경우만 re-Rendering
                    b. render()
                    c. componentDidUpdate()

                부모가 현재 컴포넌트 삭제 시: 부모 컴포넌트는 자식 컴포넌트를 삭제할 수 있다. 삭제하면 화면에서 사라진다.
                    a. componentDidWillUnmount()
                    b. 소멸



5-6. 클래스와 Hooks 라이프사이클 비교

            useEffect()를 여러번 쓸 수 있다.
            state마다 다른 effect()를 줄 때 사용한다.

            class의 경우 componentDidMount() 또는 componentDidUpdate() 에서
            모든 state를 조건문으로 분기 처리한다.

            useEffect(() => { // componentDidMount(), componentDidUpdate() 역할 (1대1 대응은 아님)
                console.log('useEffect 실행');

                // 매번 clearInterval()를 해주기 때문에 setTimeout()과 동일하다.
                interval.current = setInterval(changeHand, 100);

                return () => { // componentWillUnmount() 역할
                    console.log('useEffect 종료');
                    clearInterval(interval.current);
                }

            }, [result]);

            useEffect(() => { // componentDidMount(), componentDidUpdate() 역할 (1대1 대응은 아님)
                console.log('useEffect 실행');

                // 매번 clearInterval()를 해주기 때문에 setTimeout()과 동일하다.
                interval.current = setInterval(changeHand, 100);

                return () => { // componentWillUnmount() 역할
                    console.log('useEffect 종료');
                    clearInterval(interval.current);
                }

            }, [score]);



6-1. 로또 추첨기 컴포넌트

        자식 컴포넌트는 PureComponent로 해도된다.
        데이터를 담고 있는것보다 화면 역할을 주로 담당하기 때문이다.

        Hooks는 함수 컴포넌트를 Hooke라고 하는게 아니라
        useState나 useEffect를 사용했을 경우 Hooks라고 한다.
        Hooks를 사용하지 않으면 함수 컴포넌트라고 부른다.

        함수 컴포넌트를 memo()로 감싸는것 처럼
        컴포넌트를 다른 컴포넌트로 감싸는 것을
        하이오더 컴포넌트 혹은 HOC라고한다


6-5. useMemo와 useCallback

        useMemo(): 복잡한 함수 결괏값을 기억 (함수의 리턴 값)
        useRef(): 일반 값을 기억
        useCallback(): 함수 자체를 기억

        참고로 Hooks는 다른 코드에서 사용하는 경우가 있기 때문에 선언의 순서가 중요하다.


        {bonus && <Ball number={bonus} onClick={onClickRedo}/>}
        이런식으로 props에 함수를 넣으면 자식 컴포넌트는 새로운 함수인줄 알고 계속 re-rendering을 하게된다.
        이런것을 방지하기 위해서 useCallback()를 사용해야한다.



6-6. Hooks에 대한 자잘한 팁들

        useState, useRef와 같은 Hooks는 조건문에 넣으면 안된다.
        그리고 함수나 반복문에서도 웬만하면 넣지 말아야한다.
        그리고 순서가 중요하다. 컴포넌트에서 최상단에 선언하고
        다음번에 다시 선언할 때 그 순서를 똑같이 유지시켜야한다.
        useEffect() 안에도 useState()를 쓰면 안된다.

        순서가 확실히 정해진 반복문 같은 경우에는 그 안에 useState() 사용해도 된다.

        클래스 같은 경우에는 componentDidUpdate() 하나의 메서드에
        여러 조건을 넣어서 사용하지만

        Hooks 같은 경우에는 여러개의 useEffect()를 생성해서 사용한다.

        * componentDidMount()만 하고 싶은 경우
        useEffect( () => {
            // ajax 통신 처리
        },[]);

        * componentDidUpdate()만 하고 싶은 경우
        Hooks의 문제점은 componentDidMount()가 무조건 실행된다는 점이 있는데
        componentDidUpdate()만 하고 싶을 경우에는 방법이 있다.
        일단 componentDidMount()가 실행되기는 하지만 그때 아무런 작업을 하지 않고
        다음 실행될 때 부터 작업을 한다.

        const mounted = useRef(false);
        useEffect( () => {
            if(!mounted.current) {
                mounted.current = true;
            } else {
                // ajax 통신 처리
            }
        }, [바뀌는 값]);